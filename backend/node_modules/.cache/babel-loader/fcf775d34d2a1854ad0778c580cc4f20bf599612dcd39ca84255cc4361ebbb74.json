{"ast":null,"code":"const express = require('express');\nconst mysql = require('mysql2/promise');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst router = express.Router();\n\n// Configuration de la connexion à la base de données\nconst dbConfig = {\n  host: 'localhost',\n  user: 'luchi',\n  password: '6Alamaison',\n  database: 'recette_cuisine'\n};\n\n// Route d'authentification\nrouter.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Connexion à la base de données\n    const connection = await mysql.createConnection(dbConfig);\n\n    // Vérification de l'existence de l'utilisateur\n    const [rows] = await connection.execute('SELECT * FROM users WHERE username = ?', [username]);\n    if (rows.length === 0) {\n      return res.status(401).json({\n        message: 'Identifiants invalides'\n      });\n    }\n    const user = rows[0];\n\n    // Vérification du mot de passe\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(401).json({\n        message: 'Identifiants invalides'\n      });\n    }\n\n    // Génération du token JWT\n    const token = jwt.sign({\n      userId: user.id,\n      username: user.username\n    }, 'votre_cle_secrete_jwt', {\n      expiresIn: '1h'\n    });\n    res.json({\n      token\n    });\n  } catch (error) {\n    console.error('Erreur lors de l\\'authentification:', error);\n    res.status(500).json({\n      message: 'Erreur serveur'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","mysql","bcrypt","jwt","router","Router","dbConfig","host","user","password","database","post","req","res","username","body","connection","createConnection","rows","execute","length","status","json","message","isPasswordValid","compare","token","sign","userId","id","expiresIn","error","console","module","exports"],"sources":["C:/Users/luchi/Documents/DevProject/mon-appli-Recette/src/Backend/auth.js"],"sourcesContent":["const express = require('express');\r\nconst mysql = require('mysql2/promise');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst router = express.Router();\r\n\r\n// Configuration de la connexion à la base de données\r\nconst dbConfig = {\r\n  host: 'localhost',\r\n  user: 'luchi',\r\n  password: '6Alamaison',\r\n  database: 'recette_cuisine'\r\n};\r\n\r\n// Route d'authentification\r\nrouter.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    // Connexion à la base de données\r\n    const connection = await mysql.createConnection(dbConfig);\r\n\r\n    // Vérification de l'existence de l'utilisateur\r\n    const [rows] = await connection.execute(\r\n      'SELECT * FROM users WHERE username = ?',\r\n      [username]\r\n    );\r\n\r\n    if (rows.length === 0) {\r\n      return res.status(401).json({ message: 'Identifiants invalides' });\r\n    }\r\n\r\n    const user = rows[0];\r\n\r\n    // Vérification du mot de passe\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isPasswordValid) {\r\n      return res.status(401).json({ message: 'Identifiants invalides' });\r\n    }\r\n\r\n    // Génération du token JWT\r\n    const token = jwt.sign(\r\n      { userId: user.id, username: user.username },\r\n      'votre_cle_secrete_jwt',\r\n      { expiresIn: '1h' }\r\n    );\r\n\r\n    res.json({ token });\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'authentification:', error);\r\n    res.status(500).json({ message: 'Erreur serveur' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAc,CAAC;AAEnC,MAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;;AAE/B;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,OAAO;EACbC,QAAQ,EAAE,YAAY;EACtBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACAN,MAAM,CAACO,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,QAAQ;IAAEL;EAAS,CAAC,GAAGG,GAAG,CAACG,IAAI;EAEvC,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,MAAMf,KAAK,CAACgB,gBAAgB,CAACX,QAAQ,CAAC;;IAEzD;IACA,MAAM,CAACY,IAAI,CAAC,GAAG,MAAMF,UAAU,CAACG,OAAO,CACrC,wCAAwC,EACxC,CAACL,QAAQ,CACX,CAAC;IAED,IAAII,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACrB,OAAOP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAyB,CAAC,CAAC;IACpE;IAEA,MAAMf,IAAI,GAAGU,IAAI,CAAC,CAAC,CAAC;;IAEpB;IACA,MAAMM,eAAe,GAAG,MAAMtB,MAAM,CAACuB,OAAO,CAAChB,QAAQ,EAAED,IAAI,CAACC,QAAQ,CAAC;IAErE,IAAI,CAACe,eAAe,EAAE;MACpB,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAyB,CAAC,CAAC;IACpE;;IAEA;IACA,MAAMG,KAAK,GAAGvB,GAAG,CAACwB,IAAI,CACpB;MAAEC,MAAM,EAAEpB,IAAI,CAACqB,EAAE;MAAEf,QAAQ,EAAEN,IAAI,CAACM;IAAS,CAAC,EAC5C,uBAAuB,EACvB;MAAEgB,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDjB,GAAG,CAACS,IAAI,CAAC;MAAEI;IAAM,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3DlB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;EACrD;AACF,CAAC,CAAC;AAEFU,MAAM,CAACC,OAAO,GAAG9B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}